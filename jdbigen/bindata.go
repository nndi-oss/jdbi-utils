// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/class.tmpl
// template/sqlobject.tmpl
// template/usehandle.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateClassTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xcf\x8a\x83\x30\x10\xc6\xef\x81\xbc\xc3\xe0\x69\xf7\xb0\x7a\xdf\x65\x41\xa8\xad\xb7\x7a\xd0\x17\x18\x75\x28\xa1\x49\x94\x64\x2c\x48\xc8\xbb\x17\x4d\xff\xdd\x3e\x66\x7e\xdf\xf7\x93\xa2\xd4\x93\xe9\xa7\x6b\x5e\x21\xa3\x14\xf3\xd2\x6b\x35\xc0\xa0\xd1\x7b\x08\x01\xf2\x96\xdd\x32\x70\x7e\x46\x43\x10\xe3\xd1\xb2\xe2\x15\x82\x14\x00\x00\x21\xfc\x80\x43\x7b\xa1\x17\x76\x52\xa4\x47\x0f\x31\x26\xa0\x28\xa0\x3c\x4c\x7a\x31\xf6\xcb\xa2\xa1\xff\x6c\x5b\x4c\x87\xe7\x62\xf6\x9d\xd0\xd9\xa9\x1b\x32\xed\xce\x6e\x9d\xb7\xd7\x9e\x1f\xd8\xdf\xdb\x48\x76\xfc\x14\x74\x4d\xd5\xfc\x42\x4d\x96\xdc\xd6\xaf\x89\x99\x9c\x07\xb4\x23\xb4\x29\x4b\x11\xa5\xb8\x07\x00\x00\xff\xff\xf4\x4c\xf7\x1b\xe9\x00\x00\x00")

func templateClassTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClassTmpl,
		"template/class.tmpl",
	)
}

func templateClassTmpl() (*asset, error) {
	bytes, err := templateClassTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/class.tmpl", size: 233, mode: os.FileMode(438), modTime: time.Unix(1650751869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSqlobjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6e\xda\x4c\x14\x85\xf7\x96\xfc\x0e\x57\xac\x8c\xf4\x6b\xb2\xf8\x77\x49\x55\x11\x9a\x10\xa1\x90\x42\x62\xfa\x00\x83\x7d\xa0\x37\xb5\x67\x9c\x99\x4b\x5a\x17\xf9\xdd\x2b\xdb\xa0\x52\x05\x97\x58\xea\xca\x63\xcf\x39\xf3\x1d\x9f\xb9\x9c\x17\xd6\x09\x59\xb7\x51\xcf\xe9\x8a\xd5\xeb\xff\x2a\xb1\x0e\x2a\xd7\x45\x01\xa7\x9e\xec\xf7\x87\x66\x75\x15\x06\x5d\x52\x2f\x5a\x90\xc3\x88\x8a\x0f\xab\x4f\xd6\x08\x7e\xc8\x69\x93\x7f\xc9\xec\xea\x19\x89\xa8\xc4\x9a\x35\x6f\xd4\x13\x36\xec\x05\x6e\x0c\x6d\xfe\x46\xeb\x34\x9e\x49\x79\xe4\xdb\x7a\xb1\x39\xff\x84\x53\x63\x36\x69\x4f\x79\x9d\xaf\x87\x65\xc9\x39\xbc\xe8\xbc\xc0\x59\xd0\xef\x0a\xef\x20\x77\x30\x70\x5a\x90\xde\xa3\xf4\xef\x77\xc6\x2f\xd9\xe3\x16\xae\xec\xe5\xf8\x52\xa4\x5a\x70\x15\x06\x61\x70\x71\x41\xbb\x1d\xa9\x58\xdc\x36\x11\xf5\x59\xe7\xa0\xaa\xba\x35\xc2\x52\x92\x43\xe1\xe0\x61\xc4\x1f\x6b\x96\x7a\x95\x41\xc5\xc9\x57\xe4\x9a\xaa\x4a\xbd\xd9\xda\x1f\x12\x06\xa3\xb7\x57\x1c\x75\xc1\x54\x92\x69\xef\x87\x61\x50\x6c\x57\x19\x27\xc4\x46\xe0\xd6\x3a\xc1\x89\x78\x37\xd7\x73\xda\x85\x01\x11\xd1\xe8\xf0\xff\xd1\x60\xb7\xa3\xc4\x41\x0b\x62\x64\x48\x24\x7e\x9c\x1d\x7c\x54\x55\x83\x61\xab\x9f\xb1\x97\x0f\x5d\x19\x3e\xd2\x9a\x4d\x7a\x9d\x65\xd1\xb0\xe9\xa6\x0f\x80\xe6\x93\x49\x7c\xbb\xa4\x4b\xbb\x5e\x7b\x08\xcd\xa6\x0f\xd3\x25\x5d\x66\x9c\xb3\xf4\x83\x2f\xf4\x86\x4d\x3d\x08\xd1\xa8\x1e\xbf\x68\xb0\x3f\xa3\xae\x84\x9a\xf5\x7f\xb4\xdf\x69\x59\xfb\xad\xf6\xe5\x3d\xc9\xc7\xe5\xe2\xdb\xe9\x7a\xe6\x85\xb0\x35\x67\x32\x8e\xcb\xe9\x3e\x5b\x7d\x37\x1b\xc8\xc2\x71\xae\x5d\x79\x8f\x72\xc2\xc8\xd2\x65\x59\xe0\xb8\x19\x4e\xff\x0c\xd5\x4e\xdf\x51\xaa\x7a\x3c\xa6\xc6\xc3\x75\x5c\xda\xab\xe5\x94\xb8\x11\xb4\xdc\xda\x10\x0d\x30\x18\x76\xcf\x2e\x9a\xc7\x19\x70\xfb\xa1\xbb\x8e\x06\xbc\x6d\x5d\xff\x14\x7c\x83\x0c\x67\xc1\x69\x23\xea\xdf\x74\x15\x06\xbf\x02\x00\x00\xff\xff\x8a\xcd\xaa\x72\xe0\x05\x00\x00")

func templateSqlobjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSqlobjectTmpl,
		"template/sqlobject.tmpl",
	)
}

func templateSqlobjectTmpl() (*asset, error) {
	bytes, err := templateSqlobjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sqlobject.tmpl", size: 1504, mode: os.FileMode(438), modTime: time.Unix(1650751848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUsehandleTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x6f\x6f\xd3\x30\x10\xc6\xdf\x57\xea\x77\x38\xe5\x55\x2a\x75\x1e\x12\xef\x36\x98\xb4\x69\x9b\x28\x0c\xba\xa9\xe5\x03\xb8\xf1\xad\xbd\xe2\x38\x91\x73\x29\x44\x51\xbe\x3b\xb2\xd3\x94\xfe\x49\xe8\x80\x82\x44\xde\x24\xb5\xcf\xcf\x3d\xf7\xbb\x73\x29\x4e\x13\xcb\x90\xd8\xb9\x58\xaa\x19\x89\xd5\x6b\x11\x25\x16\xc5\x7b\x35\xa3\xcb\x7e\xaf\xdf\x5b\x07\x2c\xe5\x4a\x8a\x9c\x49\x8b\x07\xca\xf8\xb2\x65\x7d\x9c\x32\x25\x46\x6a\x7f\xea\xfc\x1c\xca\x12\xc4\x84\x6d\x1e\xb1\xf8\x24\x63\x84\xaa\x02\x8b\xa9\xc5\x0c\x0d\x67\xdb\xbb\x53\x39\xd3\x28\x26\xd1\x02\x63\x09\x55\x25\x0e\xb6\xd6\xc7\xfb\xbd\x34\x9f\x69\x8a\x20\xd2\x32\xcb\x5a\xf4\x6f\xaf\xc7\x50\xf6\x7b\x00\x00\xa9\xa5\x95\x64\x84\x67\x32\x52\x83\x2b\x06\x96\x4d\x45\x7e\xbf\x56\x6a\xd5\x08\x37\xe1\x83\x46\xce\x3d\xbc\xa0\xcc\x33\x82\xb7\x8d\x96\x5b\xae\xf6\x24\x1d\x9e\x37\x87\xba\x77\x86\x89\x8b\x2b\x67\x48\x5d\x6b\x1d\xee\x48\x5b\xe4\xdc\x1a\xaf\x2a\xbe\x12\x2f\xde\x49\xa3\x34\x86\x0b\xff\x82\xb3\x2b\xa8\xbf\x44\x64\x51\x32\x3e\xe5\x68\x8b\x30\x28\x4b\xa8\x7f\x4f\x50\x63\xc4\x93\xa7\x87\x26\x27\x54\x55\x30\xf8\xa1\xee\x1e\x11\xcb\x74\x9a\xdc\xa0\x34\x61\x97\x37\xe1\xb1\xee\x9f\xd3\x94\x71\x38\x18\xfc\x51\xb1\x8f\x72\x4e\x46\x32\xaa\x90\x0c\x83\xa6\x98\x78\x08\xee\x33\x79\x7e\xce\x90\xff\x32\x0a\x18\xdf\xdf\x4f\xee\xa6\x70\x51\x67\x83\x87\xd1\xc7\xd1\x14\x2e\xbc\x8d\x7d\x4c\xbe\xe4\x19\x19\x15\x06\xf5\xfe\xb0\xb6\xdb\x1d\x56\x8b\x06\xc3\xa6\x96\x96\xc0\xdf\x44\xff\x02\xfc\xcd\x95\x3b\xd2\x82\x9b\x62\xa4\x5c\xee\x39\xf2\xa3\xa5\x58\xda\xe2\x03\x16\xf7\x84\x5a\x4d\x8b\x14\xb7\x51\x91\x3a\x79\x33\x6e\x8a\xc7\x2f\x47\x66\xd3\x93\x7c\x35\x74\xd9\x4f\x34\xb5\xae\xea\xb1\xc1\x6e\x72\xab\x84\x14\x90\xc9\xd0\x72\xa7\x34\xa0\x7f\xed\x10\xe9\x46\x51\xee\x5a\x58\xa3\xdb\x01\xf4\x39\x55\x92\x31\x0c\xda\xa6\xae\x2c\xcf\xc0\x4a\x33\xdf\xb4\x43\xf8\x06\x65\xfe\x7f\xaf\x63\xf6\x9c\xf1\xb5\xe3\x60\xb8\x76\x2b\xe6\xc8\x5b\xeb\xe1\xa0\x23\x17\x1a\xd5\x2e\x8d\xdf\x30\xca\x19\xc3\x86\x9c\xa7\xf7\x53\x8c\x79\x5d\xd6\x3f\xc7\xb8\x19\xb4\x7a\xe1\xf8\xa0\xfd\xe7\x9c\x15\x6a\xac\x39\xff\xf2\x45\x3e\x2d\xef\x5b\x6f\xe4\x65\xbc\x37\x97\xfb\x70\x3c\x1c\xc2\x91\x6a\x25\x77\x94\x4e\xd5\xef\x7d\x0f\x00\x00\xff\xff\x7e\x83\x30\x57\xba\x08\x00\x00")

func templateUsehandleTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUsehandleTmpl,
		"template/usehandle.tmpl",
	)
}

func templateUsehandleTmpl() (*asset, error) {
	bytes, err := templateUsehandleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/usehandle.tmpl", size: 2234, mode: os.FileMode(438), modTime: time.Unix(1650750250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/class.tmpl":     templateClassTmpl,
	"template/sqlobject.tmpl": templateSqlobjectTmpl,
	"template/usehandle.tmpl": templateUsehandleTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"class.tmpl":     &bintree{templateClassTmpl, map[string]*bintree{}},
		"sqlobject.tmpl": &bintree{templateSqlobjectTmpl, map[string]*bintree{}},
		"usehandle.tmpl": &bintree{templateUsehandleTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
