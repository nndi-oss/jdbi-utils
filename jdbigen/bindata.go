// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/class.tmpl
// template/pagination.tmpl
// template/sqlobject.tmpl
// template/usehandle.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateClassTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xcf\x6a\x84\x30\x10\x87\xef\x81\xbc\xc3\xe0\xa9\x3d\x54\xef\x2d\x05\xa1\xb6\x42\x0f\xeb\x41\x5f\x60\xd4\x61\x09\x9b\x44\x49\x46\x41\x42\xde\x7d\xd1\xec\xbf\xdb\x8f\x99\x8f\xef\x93\xa2\xd4\x93\xe9\xa7\x4b\x5e\x21\xa3\x14\xf3\xd2\x6b\x35\xc0\xa0\xd1\x7b\x08\x01\xf2\x96\xdd\x32\x70\x7e\x42\x43\x10\xe3\xaf\x65\xc5\x1b\x04\x29\x00\x00\x42\xf8\x00\x87\xf6\x4c\x0f\xec\x4f\x91\x1e\x3d\xc4\x98\x80\xa2\x80\xf2\x67\xd2\x8b\xb1\x6f\x16\x0d\x7d\x67\xbb\x31\x1d\xee\xc6\xec\x3d\xa1\xb3\x53\x2b\x32\x1d\xcd\x6e\x9b\xf7\xd7\xb1\xff\x71\xc5\x1b\xfa\xf5\xac\x92\x1d\x5f\x23\x5d\x53\x35\x9f\x50\x93\x25\xb7\x3b\x6a\x62\x26\xe7\x01\xed\x08\x6d\xda\x52\x44\x29\xae\x01\x00\x00\xff\xff\xf9\x89\x66\xe5\xed\x00\x00\x00")

func templateClassTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClassTmpl,
		"template/class.tmpl",
	)
}

func templateClassTmpl() (*asset, error) {
	bytes, err := templateClassTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/class.tmpl", size: 237, mode: os.FileMode(438), modTime: time.Unix(1650760336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatePaginationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4b\x8f\x9b\x30\x10\xbe\x23\xf1\x1f\x3e\x71\x82\xdd\xc4\x69\xaf\x4d\xb2\x52\x1e\x54\xea\x25\xa9\x42\x7a\xa8\xaa\x6a\x65\xc2\x24\xb1\x44\x0c\x6b\x4c\xdb\x2d\xe2\xbf\x57\x06\x9b\x5d\xd4\x97\x2f\x88\x99\xf9\x5e\x63\x97\x75\x9a\x8b\x13\x2a\xcd\xb5\x38\x41\xd1\xa9\x50\x19\x3e\xf2\x8b\x90\x5c\x8b\x42\x22\x14\x52\xa3\xe4\x17\xda\xd5\xb7\x94\xd4\x04\xee\x3f\x11\x3f\x69\x82\xa6\x01\x4b\xb4\xaa\x4f\x9a\xed\xf8\x8d\xd0\xb6\xdb\xd5\x9e\xed\x55\x46\x6a\xfd\x8c\xa2\xff\x46\x68\x5a\xdf\x9b\xcd\xb0\x3f\x6c\xe3\x03\xd6\x9f\xb1\xb0\x9d\x07\xdf\x1b\x1b\x20\x59\xdf\xe0\xe0\x8d\xef\x35\xcd\x14\x8a\xcb\x0b\x0d\x32\xef\x05\xe5\x59\x85\xb6\xf5\x3d\x00\xc6\xc0\xb1\xf8\x54\x96\xa4\xc0\x36\x45\x5e\xdf\xa4\x33\xf2\xb8\x4a\x36\x61\x60\x0c\x8e\xeb\x58\x25\x9b\x20\x9a\xfc\x17\xbe\x8d\xff\x82\x37\x8d\x8e\xc0\x98\x23\x99\x0d\x5e\x76\xfb\x5d\x1c\x06\x98\x4e\x11\x44\x73\xdf\xeb\x8b\x36\xdf\x59\x48\x9e\x23\xd1\x4a\xc8\x0b\xaa\xa7\x7c\xe8\xdb\xb0\xe1\x4b\x2b\x32\xc1\x61\x8f\xbe\x8a\x8a\x55\x4f\x39\x96\x16\x65\x8a\xad\x03\xcf\xee\xee\xec\xe8\x1d\xe2\x1f\xfc\x56\xe6\xf4\x0e\x8b\x53\x91\xd1\x83\xe5\xeb\x16\x9d\x3e\x27\x1d\x83\xd5\x62\x1f\xb6\x66\x39\x4c\x5f\x49\x3a\xf9\xcd\x21\x5e\x1d\xe3\xed\xe3\xea\x68\x5a\x13\xf4\x23\xd1\x7c\x31\xeb\xd8\x9c\xca\x6c\x14\xca\x6a\xbc\xe6\x71\x12\x8c\xa1\xd0\x57\x52\xd5\x28\x8d\x38\x23\x34\x89\xb0\x5c\x76\xdb\x8a\xa0\x48\xd7\x4a\x22\x08\xe6\x2f\x53\xdf\xb8\x42\x95\x62\x09\x49\xdf\xad\xc6\xba\x16\x79\x46\x2a\x8c\x5e\x8d\x55\x29\xe3\x65\x49\x32\x0b\xdd\x92\x22\x57\x08\x26\xfd\x15\xb8\xd1\x73\xa1\xba\x87\x2c\xb0\xc4\x9b\x39\x04\x16\xd6\x1d\xcb\x49\x5e\xf4\x15\x53\xbc\x9d\x43\xdc\xdf\x8f\xdc\x8e\x45\x7a\xc0\x17\xf1\xf5\x9f\x4a\xed\x9f\xfc\x59\xe8\x6f\x92\x3d\xd5\xf0\x14\xcc\xb1\xfb\xa8\x52\xa6\x8b\x3e\xfa\x90\xb9\xf5\xbd\xf6\x57\x00\x00\x00\xff\xff\xe8\x9e\xc4\x7b\xaf\x03\x00\x00")

func templatePaginationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatePaginationTmpl,
		"template/pagination.tmpl",
	)
}

func templatePaginationTmpl() (*asset, error) {
	bytes, err := templatePaginationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/pagination.tmpl", size: 943, mode: os.FileMode(438), modTime: time.Unix(1650761928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSqlobjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6e\xda\x4c\x14\x85\xf7\x96\xfc\x0e\x57\xac\x8c\xf4\x6b\xb2\xf8\x77\x49\x55\x11\x9a\x10\xa1\x90\x42\x62\xfa\x00\x83\x7d\xa0\x37\xb5\x67\x9c\x99\x4b\x5a\x17\xf9\xdd\x2b\xdb\xa0\x52\x05\x97\x58\xea\xca\x63\xcf\x39\xf3\x1d\x9f\xb9\x9c\x17\xd6\x09\x59\xb7\x51\xcf\xe9\x8a\xd5\xeb\xff\x2a\xb1\x0e\x2a\xd7\x45\x01\xa7\x9e\xec\xf7\x87\x66\x75\x15\x06\x5d\x52\x2f\x5a\x90\xc3\x88\x8a\x0f\xab\x4f\xd6\x08\x7e\xc8\x69\x93\x7f\xc9\xec\xea\x19\x89\xa8\xc4\x9a\x35\x6f\xd4\x13\x36\xec\x05\x6e\x0c\x6d\xfe\x46\xeb\x34\x9e\x49\x79\xe4\xdb\x7a\xb1\x39\xff\x84\x53\x63\x36\x69\x4f\x79\x9d\xaf\x87\x65\xc9\x39\xbc\xe8\xbc\xc0\x59\xd0\xef\x0a\xef\x20\x77\x30\x70\x5a\x90\xde\xa3\xf4\xef\x77\xc6\x2f\xd9\xe3\x16\xae\xec\xe5\xf8\x52\xa4\x5a\x70\x15\x06\x61\x70\x71\x41\xbb\x1d\xa9\x58\xdc\x36\x11\xf5\x59\xe7\xa0\xaa\xba\x35\xc2\x52\x92\x43\xe1\xe0\x61\xc4\x1f\x6b\x96\x7a\x95\x41\xc5\xc9\x57\xe4\x9a\xaa\x4a\xbd\xd9\xda\x1f\x12\x06\xa3\xb7\x57\x1c\x75\xc1\x54\x92\x69\xef\x87\x61\x50\x6c\x57\x19\x27\xc4\x46\xe0\xd6\x3a\xc1\x89\x78\x37\xd7\x73\xda\x85\x01\x11\xd1\xe8\xf0\xff\xd1\x60\xb7\xa3\xc4\x41\x0b\x62\x64\x48\x24\x7e\x9c\x1d\x7c\x54\x55\x83\x61\xab\x9f\xb1\x97\x0f\x5d\x19\x3e\xd2\x9a\x4d\x7a\x9d\x65\xd1\xb0\xe9\xa6\x0f\x80\xe6\x93\x49\x7c\xbb\xa4\x4b\xbb\x5e\x7b\x08\xcd\xa6\x0f\xd3\x25\x5d\x66\x9c\xb3\xf4\x83\x2f\xf4\x86\x4d\x3d\x08\xd1\xa8\x1e\xbf\x68\xb0\x3f\xa3\xae\x84\x9a\xf5\x7f\xb4\xdf\x69\x59\xfb\xad\xf6\xe5\x3d\xc9\xc7\xe5\xe2\xdb\xe9\x7a\xe6\x85\xb0\x35\x67\x32\x8e\xcb\xe9\x3e\x5b\x7d\x37\x1b\xc8\xc2\x71\xae\x5d\x79\x8f\x72\xc2\xc8\xd2\x65\x59\xe0\xb8\x19\x4e\xff\x0c\xd5\x4e\xdf\x51\xaa\x7a\x3c\xa6\xc6\xc3\x75\x5c\xda\xab\xe5\x94\xb8\x11\xb4\xdc\xda\x10\x0d\x30\x18\x76\xcf\x2e\x9a\xc7\x19\x70\xfb\xa1\xbb\x8e\x06\xbc\x6d\x5d\xff\x14\x7c\x83\x0c\x67\xc1\x69\x23\xea\xdf\x74\x15\x06\xbf\x02\x00\x00\xff\xff\x8a\xcd\xaa\x72\xe0\x05\x00\x00")

func templateSqlobjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSqlobjectTmpl,
		"template/sqlobject.tmpl",
	)
}

func templateSqlobjectTmpl() (*asset, error) {
	bytes, err := templateSqlobjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sqlobject.tmpl", size: 1504, mode: os.FileMode(438), modTime: time.Unix(1650761942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUsehandleTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xd1\x6e\xda\x3e\x14\xc6\xef\x91\x78\x87\xa3\x5c\x05\x89\xbf\xfb\x97\x76\xd7\x6e\x95\x5a\xb5\x68\x6c\x6c\x50\xc1\x1e\xc0\xc4\x07\x38\xcc\x71\x22\xe7\x84\x2d\x8a\xf2\xee\x93\x1d\xd2\x01\x0d\xa5\xdd\xa8\x96\x9b\x24\xf6\xf1\x77\xbe\xef\x67\x9b\xe2\x34\xb1\x0c\x89\x5d\x8a\xb5\x9a\x93\xd8\xbc\x13\x51\x62\x51\x7c\x52\x73\xba\xea\x76\xba\x9d\x6d\xc1\x5a\x6e\xa4\xc8\x99\xb4\x18\x51\xc6\x57\x2d\xe3\xe3\x94\x29\x31\x52\xfb\x55\x17\x17\x50\x96\x20\xa6\x6c\xf3\x88\xc5\x57\x19\x23\x54\x15\x58\x4c\x2d\x66\x68\x38\xdb\x9d\x9d\xc9\xb9\x46\x31\x8d\x56\x18\x4b\xa8\x2a\xf1\x64\x6a\xbb\xbc\xdb\x49\xf3\xb9\xa6\x08\x22\x2d\xb3\xac\x45\xff\xee\x66\x0c\x65\xb7\x03\x00\x90\x5a\xda\x48\x46\x58\x90\x91\x1a\x5c\x18\x58\x37\x89\xfc\x7c\xad\xd4\xaa\x11\x3e\x96\xf7\x1a\x39\xf7\xf0\x8a\x32\xcf\x08\x3e\x34\x5a\x6e\xb8\x3a\x90\x74\x78\xde\x3f\xd5\xbd\x37\x4c\x5c\x5c\x3b\x43\xea\x46\xeb\x70\x4f\xda\x22\xe7\xd6\x78\x55\xf1\x83\x78\xf5\x51\x1a\xa5\x31\x5c\xf9\x17\xfc\x77\x0d\xf5\x97\x88\x2c\x4a\xc6\x87\x1c\x6d\x11\x06\x65\x09\xf5\xff\x14\x35\x46\x3c\x7d\x18\x35\x3d\xa1\xaa\x82\xde\x6f\x75\xf7\x88\x58\xa6\xb3\xe4\x16\xa5\x09\x8f\x79\x13\x1e\xeb\xe1\x3a\x4d\x19\x87\xbd\xde\x5f\x85\x9d\xc8\x25\x19\xc9\xa8\x42\x32\x0c\x9a\x62\xe2\x3e\xb8\xcf\x64\xb1\xc8\x90\xdf\x18\x05\x8c\x07\x83\xe9\xfd\x0c\x2e\xeb\x6e\x30\x1a\x7e\x19\xce\xe0\xd2\xdb\x38\xc4\xe4\x23\xcf\xc9\xa8\x30\xa8\xe7\xfb\xb5\xdd\xe3\x65\xb5\x68\xd0\x6f\xb2\xb4\x14\xfe\x21\xfa\x17\xe0\x6f\xae\xdc\x89\x2d\xb8\x2d\x86\xca\xf5\x5e\x22\x4f\x2c\xc5\xd2\x16\x9f\xb1\x18\x10\x6a\x35\x2b\x52\xdc\x45\x45\xea\xec\x9b\x71\x5b\x4c\xbe\x9f\x38\x9b\x9e\xe4\xff\x7d\xd7\xfd\x4c\xa7\xd6\xa5\x1e\x1b\x3c\x4e\x6e\x93\x90\x02\x32\x19\x5a\x3e\x2a\x0d\xe8\x5f\x7b\x44\x8e\xa3\x28\xf7\x2d\x6c\xd1\xed\x01\xfa\x96\x2a\xc9\xb8\x43\xc8\x25\x1b\x7a\x13\xcf\x13\x7a\xa4\xe4\x51\x04\x18\xf4\x1b\x6f\x2d\x75\xf8\x13\xa3\x9c\x31\x6c\xa2\xfb\xf8\xcf\x72\xc8\x6b\x5f\xff\x8e\x43\x3d\x70\xfa\xa4\xbc\x31\x07\x85\x1a\x6b\x0e\xaf\xbe\x29\xe7\xe5\x71\xe7\x8d\xbc\x82\x47\xeb\xed\x79\x11\x85\xaa\xdb\xf9\x15\x00\x00\xff\xff\x9d\x12\x7c\xfb\x03\x08\x00\x00")

func templateUsehandleTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUsehandleTmpl,
		"template/usehandle.tmpl",
	)
}

func templateUsehandleTmpl() (*asset, error) {
	bytes, err := templateUsehandleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/usehandle.tmpl", size: 2051, mode: os.FileMode(438), modTime: time.Unix(1650761903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/class.tmpl":      templateClassTmpl,
	"template/pagination.tmpl": templatePaginationTmpl,
	"template/sqlobject.tmpl":  templateSqlobjectTmpl,
	"template/usehandle.tmpl":  templateUsehandleTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"class.tmpl":      &bintree{templateClassTmpl, map[string]*bintree{}},
		"pagination.tmpl": &bintree{templatePaginationTmpl, map[string]*bintree{}},
		"sqlobject.tmpl":  &bintree{templateSqlobjectTmpl, map[string]*bintree{}},
		"usehandle.tmpl":  &bintree{templateUsehandleTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
